#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstdint>
#include <algorithm>

// Property database t·ª´ props.tsv
struct PropertyInfo {
    int id;
    int add;
    int bits;
    int paramBits;
    std::string name;
};

// M·ªôt s·ªë properties quan tr·ªçng
std::vector<PropertyInfo> properties = {
    {0, 200, 11, 0, "Strength"},
    {1, 200, 11, 0, "Energy"}, 
    {2, 200, 11, 0, "Dexterity"},
    {3, 200, 11, 0, "Vitality"},
    {7, 500, 12, 0, "Life"},  // Property ID=7 t·ª´ props.tsv
    {79, 100, 9, 0, "Gold Find"},
    {80, 100, 9, 0, "Magic Find"},
    {93, 150, 9, 0, "Attack Speed"},
    {127, 0, 5, 0, "All Skills"},
    {511, 0, 0, 0, "END_MARKER"}
};

PropertyInfo* getProperty(int id) {
    for (auto& prop : properties) {
        if (prop.id == id) return &prop;
    }
    return nullptr;
}

// Convert byte to LSB-first binary string (nh∆∞ ItemParser)
std::string byteToBinary(uint8_t byte) {
    std::string result = "";
    for (int i = 0; i < 8; i++) { // LSB-first: bit 0 tr∆∞·ªõc, bit 7 sau
        result += ((byte >> i) & 1) ? '1' : '0';
    }
    return result;
}

// Convert binary string to byte - LSB-first (match v·ªõi byteToBinary)
uint8_t binaryToByte(const std::string& binary) {
    uint8_t result = 0;
    for (int i = 0; i < 8 && i < binary.length(); i++) {
        if (binary[i] == '1') {
            result |= (1 << i); // LSB-first: bit 0 ·ªü position 0, bit 7 ·ªü position 7
        }
    }
    return result;
}

// Create ItemParser-style bitString from bytes - FIXED VERSION
std::string createBitString(const std::vector<uint8_t>& bytes) {
    std::string bitString = "";
    
    // ItemParser logic theo research_d2i_structure:
    // ƒê·ªçc t·ª´ng byte t·ª´ file, convert th√†nh 8-bit binary, k·∫øt n·ªëi theo th·ª© t·ª±
    // KH√îNG ph·∫£i prepend logic, m√† l√† append t·ª´ tr√°i sang ph·∫£i
    
    for (size_t i = 2; i < bytes.size(); i++) { // Skip JM header
        std::string binary = byteToBinary(bytes[i]);
        bitString += binary; // APPEND, kh√¥ng ph·∫£i prepend
    }
    
    return bitString;
}

// Convert bitString back to bytes - FIXED VERSION
std::vector<uint8_t> bitStringToBytes(const std::string& bitString) {
    std::vector<uint8_t> bytes;
    
    // Add JM header
    bytes.push_back('J');
    bytes.push_back('M');
    
    // Convert bitString to bytes theo th·ª© t·ª± th·∫≥ng (kh√¥ng prepend)
    // V√¨ createBitString() ƒë√£ d√πng append, n√™n ng∆∞·ª£c l·∫°i c≈©ng ph·∫£i th·∫≥ng
    
    for (int i = 0; i < bitString.length(); i += 8) {
        std::string chunk = bitString.substr(i, 8);
        if (chunk.length() < 8) {
            chunk += std::string(8 - chunk.length(), '0'); // Pad v·ªõi zeros n·∫øu thi·∫øu
        }
        uint8_t byteValue = binaryToByte(chunk);
        bytes.push_back(byteValue); // APPEND thay v√¨ prepend
    }
    
    return bytes;
}

// Convert number to binary string
std::string numberToBinary(int number, int bits) {
    std::string result = "";
    for (int i = bits - 1; i >= 0; i--) {
        result += ((number >> i) & 1) ? '1' : '0';
    }
    return result;
}

bool addPropertyToFile(const std::string& filename, int propId, int value) {
    // Step 1: Read original file
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        std::cout << "‚ùå Cannot open file: " << filename << std::endl;
        return false;
    }
    
    std::vector<uint8_t> bytes;
    uint8_t byte;
    while (file.read(reinterpret_cast<char*>(&byte), 1)) {
        bytes.push_back(byte);
    }
    file.close();
    
    std::cout << "\n=== ADDING PROPERTY TO FILE ===" << std::endl;
    std::cout << "üìÅ File: " << filename << " (" << bytes.size() << " bytes)" << std::endl;
    
    // Get property info
    PropertyInfo* prop = getProperty(propId);
    if (!prop) {
        std::cout << "‚ùå Unknown property ID: " << propId << std::endl;
        return false;
    }
    
    std::cout << "üéØ Adding Property: " << prop->name << " (ID=" << propId 
              << ", Value=" << value << ")" << std::endl;
    
    // Step 2: Create bitString t·ª´ file bytes
    std::string originalBitString = createBitString(bytes);
    std::cout << "üìä Original bitString: " << originalBitString.length() << " bits" << std::endl;
    
    // Step 3: Debug v√† t√¨m end marker th·∫≠t
    std::cout << "üîç Debug: Last 30 bits: \"" << originalBitString.substr(originalBitString.length() - 30) << "\"" << std::endl;
    std::cout << "üîç Debug: Bits 430-450: \"" << originalBitString.substr(430, 20) << "\"" << std::endl;
    
    // T√¨m t·∫•t c·∫£ v·ªã tr√≠ c√≥ "111111111" v√† ch·ªçn ƒë√∫ng
    std::string endMarker = "111111111"; // 511 in 9 bits
    std::vector<size_t> allPositions;
    
    size_t pos = 0;
    while ((pos = originalBitString.find(endMarker, pos)) != std::string::npos) {
        allPositions.push_back(pos);
        pos++;
    }
    
    std::cout << "üîç Found " << allPositions.size() << " occurrences of end marker:" << std::endl;
    for (size_t p : allPositions) {
        std::cout << "   - Position " << p << std::endl;
    }
    
    // Ch·ªçn end marker cu·ªëi c√πng (c√≥ l√Ω nh·∫•t)
    if (allPositions.empty()) {
        std::cout << "‚ùå Cannot find any end marker in bitString" << std::endl;
        return false;
    }
    
    size_t endPos = allPositions.back(); // L·∫•y v·ªã tr√≠ cu·ªëi c√πng
    std::cout << "üîç Using end marker at position: " << endPos << std::endl;
    
    // Step 4: Structure th·ª±c t·∫ø: [content][end marker][padding]
    // End marker ·ªü position endPos, v·∫≠y:
    int currentContentBits = endPos;  // Content t·ª´ 0 ƒë·∫øn endPos
    int currentPaddingBits = originalBitString.length() - endPos - 9; // Padding sau end marker
    int totalBits = originalBitString.length();
    
    std::cout << "üìè Analysis:" << std::endl;
    std::cout << "   - Total bitString: " << totalBits << " bits" << std::endl;
    std::cout << "   - End marker position: " << endPos << std::endl;
    std::cout << "   - Current padding: " << currentPaddingBits << " bits" << std::endl;
    std::cout << "   - Current content: " << currentContentBits << " bits" << std::endl;
    std::cout << "   - End marker: 9 bits" << std::endl;
    
    if (currentPaddingBits > 0) {
        std::string currentPadding = originalBitString.substr(endPos + 9, currentPaddingBits);
        std::cout << "üî¢ Current padding pattern: \"" << currentPadding << "\"" << std::endl;
    }
    
    // Step 5: C·∫Øt b·ªè end marker v√† padding ‚Üí l·∫•y pure content
    // Content n·∫±m TR∆Ø·ªöC end marker: t·ª´ 0 ƒë·∫øn endPos
    std::string pureContent = originalBitString.substr(0, currentContentBits);
    std::cout << "‚úÇÔ∏è  Pure content (no end marker/padding): " << pureContent.length() << " bits" << std::endl;
    
    // Step 6: T·∫°o property bits m·ªõi (s·ª≠ d·ª•ng LSB-first encoding nh∆∞ ItemParser)
    int rawValue = value + prop->add; // Add the add value
    
    // Convert to binary v√† reverse ƒë·ªÉ th√†nh LSB-first (nh∆∞ ItemParser)
    std::string propertyIdBits = numberToBinary(propId, 9);
    std::reverse(propertyIdBits.begin(), propertyIdBits.end()); // LSB-first
    
    std::string propertyValueBits = numberToBinary(rawValue, prop->bits);  
    std::reverse(propertyValueBits.begin(), propertyValueBits.end()); // LSB-first
    
    std::string newPropertyBits = propertyIdBits + propertyValueBits;
    
    std::cout << "üîß New property bits (LSB-first):" << std::endl;
    std::cout << "   - ID bits (9): " << propertyIdBits << std::endl;
    std::cout << "   - Value bits (" << prop->bits << "): " << propertyValueBits 
              << " (raw=" << rawValue << ")" << std::endl;
    std::cout << "   - Total: " << newPropertyBits.length() << " bits" << std::endl;
    
    // Step 7: Th√™m property v√†o CU·ªêI pure content (content s·∫Ω n·∫±m sau end marker)
    std::string newContent = pureContent + newPropertyBits;
    
    std::cout << "‚ûï Content after adding property: " << newContent.length() << " bits" << std::endl;
    
    // Step 8: Chu·∫©n b·ªã end marker m·ªõi (s·∫Ω ƒë∆∞·ª£c th√™m v√†o gi·ªØa padding v√† content)
    std::string newEndMarker = "111111111"; // End marker 511 in LSB-first (c≈©ng l√† 111111111)
    
    std::cout << "üîö New end marker ready: " << newEndMarker << std::endl;
    
    // Step 7: T√≠nh padding m·ªõi ƒë·ªÉ ƒë·∫°t byte boundary cho to√†n b·ªô: padding + end marker + content
    int totalContentBits = 9 + newContent.length(); // 9 bits end marker + content bits
    int newPaddingNeeded = (8 - (totalContentBits % 8)) % 8;
    std::string newPadding = std::string(newPaddingNeeded, '0');
    
    std::cout << "üî¢ New padding needed: " << newPaddingNeeded << " bits" << std::endl;
    if (newPaddingNeeded > 0) {
        std::cout << "üìã New padding pattern: \"" << newPadding << "\"" << std::endl;
    }
    
    // Step 8: T·∫°o bitString cu·ªëi c√πng theo c·∫•u tr√∫c th·ª±c t·∫ø: [content][end marker][padding]
    std::string finalBitString = newContent + newEndMarker + newPadding;
    std::cout << "üéØ Final bitString: " << finalBitString.length() << " bits" << std::endl;
    
    // Step 9: Convert back to bytes
    std::vector<uint8_t> newBytes = bitStringToBytes(finalBitString);
    std::cout << "üì¶ New file size: " << newBytes.size() << " bytes" << std::endl;
    std::cout << "üìà Size change: " << bytes.size() << " ‚Üí " << newBytes.size() 
              << " (+" << (newBytes.size() - bytes.size()) << " bytes)" << std::endl;
    
    // Step 10: Write to new file
    std::string outputFile = filename + ".added";
    std::ofstream outFile(outputFile, std::ios::binary);
    if (!outFile) {
        std::cout << "‚ùå Cannot create output file: " << outputFile << std::endl;
        return false;
    }
    
    for (uint8_t b : newBytes) {
        outFile.write(reinterpret_cast<const char*>(&b), 1);
    }
    outFile.close();
    
    std::cout << "‚úÖ Successfully created: " << outputFile << std::endl;
    return true;
}

int main(int argc, char* argv[]) {
    if (argc != 4) {
        std::cout << "Usage: " << argv[0] << " <file.d2i> <property_id> <value>" << std::endl;
        std::cout << "\nExamples:" << std::endl;
        std::cout << "  " << argv[0] << " amu_2482595313.d2i 7 10   # Add +10 Life" << std::endl;
        std::cout << "  " << argv[0] << " amu_2482595313.d2i 0 20   # Add +20 Strength" << std::endl;
        std::cout << "  " << argv[0] << " amu_2482595313.d2i 80 30  # Add 30% Magic Find" << std::endl;
        std::cout << "\nAvailable Properties:" << std::endl;
        for (const auto& prop : properties) {
            if (prop.id != 511) {
                std::cout << "  ID " << prop.id << " = " << prop.name << std::endl;
            }
        }
        return 1;
    }
    
    std::string filename = argv[1];
    int propId = std::stoi(argv[2]);
    int value = std::stoi(argv[3]);
    
    bool success = addPropertyToFile(filename, propId, value);
    
    if (success) {
        std::cout << "\nüéâ Property addition completed successfully!" << std::endl;
        std::cout << "üìã You can now test the modified file with MedianXL Tools" << std::endl;
    } else {
        std::cout << "\n‚ùå Property addition failed!" << std::endl;
        return 1;
    }
    
    return 0;
}